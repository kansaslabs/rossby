// Code generated by protoc-gen-go. DO NOT EDIT.
// source: errors.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Errors are coded in Rossby to easily identify what has gone wrong
// TODO: create error code enumerations for quick testing of error types
type Error struct {
	Code                 uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_24fe73c7f0ddb19c, []int{0}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Multi-errors store more than one error but can be treated like a regular error
// Normally we'd implement this as a type []*Error but this format allows it to be
// easily serialized in RPC requests and responses.
type MultiError struct {
	Errors               []*Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiError) Reset()         { *m = MultiError{} }
func (m *MultiError) String() string { return proto.CompactTextString(m) }
func (*MultiError) ProtoMessage()    {}
func (*MultiError) Descriptor() ([]byte, []int) {
	return fileDescriptor_24fe73c7f0ddb19c, []int{1}
}

func (m *MultiError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiError.Unmarshal(m, b)
}
func (m *MultiError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiError.Marshal(b, m, deterministic)
}
func (m *MultiError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiError.Merge(m, src)
}
func (m *MultiError) XXX_Size() int {
	return xxx_messageInfo_MultiError.Size(m)
}
func (m *MultiError) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiError.DiscardUnknown(m)
}

var xxx_messageInfo_MultiError proto.InternalMessageInfo

func (m *MultiError) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

func init() {
	proto.RegisterType((*Error)(nil), "pb.Error")
	proto.RegisterType((*MultiError)(nil), "pb.MultiError")
}

func init() { proto.RegisterFile("errors.proto", fileDescriptor_24fe73c7f0ddb19c) }

var fileDescriptor_24fe73c7f0ddb19c = []byte{
	// 123 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x2d, 0x2a, 0xca,
	0x2f, 0x2a, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x32, 0xe5, 0x62,
	0x75, 0x05, 0x89, 0x09, 0x09, 0x71, 0xb1, 0x24, 0xe7, 0xa7, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a,
	0xf0, 0x06, 0x81, 0xd9, 0x42, 0x12, 0x5c, 0xec, 0xb9, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x12,
	0x4c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30, 0xae, 0x92, 0x3e, 0x17, 0x97, 0x6f, 0x69, 0x4e, 0x49,
	0x26, 0x44, 0xaf, 0x22, 0x17, 0x1b, 0xc4, 0x60, 0x09, 0x46, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x4e,
	0xbd, 0x82, 0x24, 0x3d, 0xb0, 0x54, 0x10, 0x54, 0x22, 0x89, 0x0d, 0x6c, 0xa5, 0x31, 0x20, 0x00,
	0x00, 0xff, 0xff, 0xc8, 0x17, 0x29, 0x88, 0x82, 0x00, 0x00, 0x00,
}
